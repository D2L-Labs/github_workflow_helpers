name: Terraform PR
on:
  workflow_call:
    inputs:
      directory:
        type: string
        required: false
        default: ./
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      TOKEN:
        required: true
jobs:
  terraform-format-validate-plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify Terraform version
        run: terraform --version

      - name: Terraform fmt
        id: fmt
        shell: bash
        run: |
          cd ${{inputs.directory}}
          terraform fmt -check

      - name: Initialize Terraform
        id: init
        shell: bash
        run: |
          cd ${{inputs.directory}}
          terraform init

      - name: Validate Terraform
        id: validate
        shell: bash
        run: |
          cd ${{inputs.directory}}
          terraform validate -no-color

      - name: Plan Terraform
        id: plan
        shell: bash
        continue-on-error: true
        run: |
          cd ${{inputs.directory}}
          terraform plan -no-color

      - name: Update Pull Request
        uses: actions/github-script@6.3.3
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const output = `### Terraform Directory: \`${{ inputs.directory }}\`
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        shell: bash
        run: exit 1
